Disp_StartScene();     

    
  if (EEPROM.read(EEPROMAddress) == 0xff) { /* The First time power on to write the default data to EEPROM */
      EEPROM.write(EEPROMAddress,0x00);
      EEPROM.write(++EEPROMAddress,SystemLimens.DHTHumidity_Hi);
      EEPROM.write(++EEPROMAddress,SystemLimens.DHTHumidity_Low);
      EEPROM.write(++EEPROMAddress,SystemLimens.DHTTemperature_Hi);
      EEPROM.write(++EEPROMAddress,SystemLimens.DHTTemperature_Low);
      EEPROM.write(++EEPROMAddress,SystemLimens.SoilHum);
      EEPROM.write(++EEPROMAddress,SystemLimens._SoilHum_Low);
      EEPROM.write(++EEPROMAddress,SystemLimens._SoilHum_Hi);      
      EEPROM.write(++EEPROMAddress,SystemLimens.WaterVolume);   
      EEPROM.write(++EEPROMAddress,SystemLimens.LightDaily);
      EEPROM.write(++EEPROMAddress,SystemLimens.VentTimesDaily);
      EEPROM.write(++EEPROMAddress,SystemLimens.VentTime);
  } 
  else {
      EEPROMAddress++;
      SystemLimens.DHTHumidity_Hi     = EEPROM.read(EEPROMAddress++);
      SystemLimens.DHTHumidity_Low    = EEPROM.read(EEPROMAddress++);
      SystemLimens.DHTTemperature_Hi  = EEPROM.read(EEPROMAddress++);
      SystemLimens.DHTTemperature_Low = EEPROM.read(EEPROMAddress++);
      SystemLimens.SoilHum            = EEPROM.read(EEPROMAddress++);
      SystemLimens._SoilHum_Low       = EEPROM.read(EEPROMAddress++);
      SystemLimens._SoilHum_Hi        = EEPROM.read(EEPROMAddress++);
      SystemLimens.WaterVolume        = EEPROM.read(EEPROMAddress++);        
      SystemLimens.LightDaily         = EEPROM.read(EEPROMAddress++);
      SystemLimens.VentTimesDaily     = EEPROM.read(EEPROMAddress++);
      SystemLimens.VentTime           = EEPROM.read(EEPROMAddress++);
  }
  _lightDaily = SystemLimens.LightDaily * 3600000;
  pinMode(LightRelayPin, OUTPUT); // Relay controlling : Lights
  pinMode(HumidifierRelayPin, OUTPUT); //                     Humidifier
  pinMode(IrrigationRelayPin, OUTPUT); //                     Water Pump
  pinMode(VentTransistorPin,OUTPUT); //                 Ventilation 
}

void loop() {
  CheckChangeWaterPump(); // is run constantly and completely controls the output for irrigation
  CheckChangeVents();
  CheckChangeAirHumidifier();
  rotaryMenu();           // is run constantly and controls most of the LCD / rotary encored menu       
  if ((millis() - StartTime > DataUpdateInterval - RHsPowerTime) && (millis() - StartTime < DataUpdateInterval)) {
    digitalWrite(RHsPower,HIGH);
  }
  else if (millis() - StartTime > DataUpdateInterval) {
     StartTime      = millis();
     DHTHumidity    = dht.readHumidity();
     DHTHumidity_   = (int) DHTHumidity;
     DHTTemperature = dht.readTemperature();
     DHTTemperature_ = (int) DHTTemperature;
     _soilHum = analogRead(RHsPin) / 4;
     _soilHum = constrain(_soilHum,SystemLimens._SoilHum_Low,SystemLimens._SoilHum_Hi);
     soilHum = map(_soilHum,SystemLimens._SoilHum_Low,SystemLimens._SoilHum_Hi,0,100);
     digitalWrite(RHsPower,LOW);
     CheckChangeLights();
  }
}

void rotaryMenu() {
  if(oldEncPos != encoderPos) {
    if (Mode == 0) {
      if (encoderPos == 0) {
        if (oldEncPos == 6 && RHsPowerFlag) {
          RHsPowerFlag = 0;
          digitalWrite(RHsPower,LOW);  
        }
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print(m0r1);
        lcd.setCursor(0,1);
        lcd.print(m0r2); 
      }
      if (encoderPos == 1) {
        DisplayModeLCD(m1r1,m1r2,DHTHumidity_,DHTTemperature_);
      }
      else if (encoderPos == 2) {
        DisplayModeLCD(m2r1,m2r2,SystemLimens.DHTHumidity_Low,SystemLimens.DHTHumidity_Hi);  
      }
      else if (encoderPos == 3) {
        DisplayModeLCD(m3r1,m3r2,SystemLimens.DHTTemperature_Low,SystemLimens.DHTTemperature_Hi);
      }
      else if (encoderPos == 4) {
        DisplayModeLCD(m4r1,m4r2,SystemLimens.LightDaily,lightOn);
      }
      else if (encoderPos == 5) {
        DisplayModeLCD(m5r1,m5r2,soilHum,SystemLimens.WaterVolume);
        if (oldEncPos == 6 && RHsPowerFlag) {
          RHsPowerFlag = 0;
          digitalWrite(RHsPower,LOW);
        }
      }
      else if (encoderPos == 6) {
        DisplayModeLCD(m6r1,m6r2,-27,-27);
        RHsPowerFlag = 1;
        digitalWrite(RHsPower,HIGH);
      }
      else if (encoderPos == 7) {
        DisplayModeLCD(m7r1,m7r2,SystemLimens.VentTimesDaily,SystemLimens.VentTime);
      }
    }
    if (Mode == 2 && !modeVal2) {
      if ((encoderPos > SystemLimens.DHTHumidity_Hi - 4) || (encoderPos < 1)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,0);
    }
    else if (Mode == 2 && modeVal2) {
      if ((encoderPos < SystemLimens.DHTHumidity_Low + 4) || (encoderPos > 99)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,1);
    }
    else if (Mode == 3 && !modeVal2) {
      if ((encoderPos > SystemLimens.DHTTemperature_Hi - 2) || (encoderPos < 1)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,0);
    }
    else if (Mode == 3 && modeVal2) {
      if ((encoderPos < SystemLimens.DHTTemperature_Low + 2) || (encoderPos > 49)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,1);
    }
    else if (Mode == 4 && !modeVal2) {
      if (encoderPos > 24) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,0);
    }
    else if (Mode == 4 && modeVal2) {
      if (encoderPos > 24) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,1);
    }
    else if (Mode == 5 && !modeVal2) {
      if ((encoderPos > 99) || (encoderPos == 0)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,0);
    }
    else if (Mode == 5 && modeVal2) {
      if((encoderPos == 255) || (encoderPos < 1)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,1);
    }
    else if (Mode == 7 && !modeVal2) {
      if((encoderPos == 255) || (encoderPos < 1)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,0);
    }
    else if (Mode == 7 && modeVal2) {
      if((encoderPos == 255) || (encoderPos < 1)) {
        encoderPos = oldEncPos;
      }
      ChangeValue(encoderPos,1);
    }
    oldEncPos = encoderPos;
  }
  byte buttonState = digitalRead (buttonPin); 
  if (buttonState != oldButtonState){
    if (millis () - buttonPressTime >= debounceTime){
      buttonPressTime = millis ();
      oldButtonState =  buttonState;
      if (buttonState == LOW){
        buttonPressed = 1;
      }
      else {
        buttonPressed = 0;  
      }  
    }  
  }

  if (Mode == 0) {
    if (encoderPos > (modeMax+10)) encoderPos = modeMax;
    else if (encoderPos > modeMax) encoderPos = 0;
    if (buttonPressed){ 
      if (encoderPos != 1) {  
        Mode = encoderPos;
      }
      buttonPressed = 0;
      if (Mode == 2) {
        encoderPos = SystemLimens.DHTHumidity_Low;
        SetValueCursor();
      }
      else if (Mode == 3) {
        encoderPos = SystemLimens.DHTTemperature_Low;
        SetValueCursor();
      }
      else if (Mode == 4) {
        encoderPos = SystemLimens.LightDaily;
        SetValueCursor();
      }
      else if (Mode == 5) {
        encoderPos = SystemLimens.SoilHum;
        lcd.setCursor(3,0);
        lcd.print(" lo");
        SetValueCursor();
      }
      else if (Mode == 6) {
        lcd.clear();
        lcd.print(m6r3);
      }
      else if (Mode == 7) {
        encoderPos = SystemLimens.VentTimesDaily;
        SetValueCursor();
      }
    }
  }
  if (Mode == 2 && buttonPressed && !modeVal2){
    buttonPressed = 0;
    modeVal2 = 1; 
    SystemLimens.DHTHumidity_Low = encoderPos;
    EEPROM.update(2,SystemLimens.DHTHumidity_Low);
    SetValueCursor();
    encoderPos = SystemLimens.DHTHumidity_Hi;  
  }
  else if (Mode == 2 && buttonPressed && modeVal2) {
    buttonPressed = 0;
    modeVal2 = 0;
    SystemLimens.DHTHumidity_Hi = encoderPos;
    EEPROM.update(1,SystemLimens.DHTHumidity_Hi);
    SetValueCursor(); 
    Mode = 0;
    encoderPos = 2;
  }
  else if (Mode == 3 && buttonPressed && !modeVal2){
    buttonPressed = 0;
    modeVal2 = 1;    
    SystemLimens.DHTTemperature_Low = encoderPos;
    EEPROM.update(4,SystemLimens.DHTTemperature_Low);
    SetValueCursor();
    encoderPos = SystemLimens.DHTTemperature_Hi;  
  }
  else if (Mode == 3 && buttonPressed && modeVal2) {
    buttonPressed = 0;
    modeVal2 = 0;
    SystemLimens.DHTTemperature_Hi = encoderPos;
    EEPROM.update(3,SystemLimens.DHTTemperature_Hi);
    SetValueCursor();
    Mode = 0;
    encoderPos = 3;
  }
  else if (Mode == 4 && buttonPressed && !modeVal2){
    buttonPressed = 0;
    modeVal2 = 1; 
    SystemLimens.LightDaily = encoderPos;
    _lightDaily = SystemLimens.LightDaily * 3600000;
    EEPROM.update(9,SystemLimens.LightDaily);
    SetValueCursor();
    encoderPos = 0;  
  }
  else if (Mode == 4 && buttonPressed && modeVal2){
    buttonPressed = 0;
    modeVal2 = 0; 
    _leftTillLight = encoderPos * OneHour;
    lastTimeOfUpdate = millis();
    lightOn = encoderPos;
    SetValueCursor();
    Mode = 0;
    encoderPos = 4;  
  }
  else if (Mode == 5 && buttonPressed && !modeVal2){
    buttonPressed = 0;
    modeVal2 = 1;
    SystemLimens.SoilHum = encoderPos;
    EEPROM.update(5,SystemLimens.SoilHum);
    SetValueCursor();
    lcd.setCursor(3,0);
    lcd.print("[%]");
    lcd.setCursor(8,1);
    lcd.print("    ");
    encoderPos = SystemLimens.WaterVolume;
  }
  else if (Mode == 5 && buttonPressed && modeVal2) {
    buttonPressed = 0;
    modeVal2 = 0;
    SystemLimens.WaterVolume = encoderPos;
    EEPROM.update(8,SystemLimens.WaterVolume);
    lcd.setCursor(8,1);
    lcd.print("[dL]");    
    SetValueCursor();
    Mode = 0;
    encoderPos = 5;
  }
  else if (Mode == 6 && buttonPressed && !modeVal2) {
    buttonPressed = 0;
    modeVal2 = 1;
    SystemLimens._SoilHum_Low = analogRead(RHsPin) / 4;
    EEPROM.update(6,SystemLimens._SoilHum_Low);
    lcd.clear();
    lcd.setCursor(0,1);
    lcd.print("wet");
  }
  else if (Mode == 6 && buttonPressed && modeVal2) {
    buttonPressed = 0;
    modeVal2 = 0;
    SystemLimens._SoilHum_Hi = analogRead(RHsPin) / 4;
    EEPROM.update(7,SystemLimens._SoilHum_Hi);
    Mode = 0;
    encoderPos = 0;
  }
  if (Mode == 7 && buttonPressed && !modeVal2){
    buttonPressed = 0;
    modeVal2 = 1; 
    SystemLimens.VentTimesDaily = encoderPos;
    EEPROM.update(10,SystemLimens.VentTimesDaily);
    SetValueCursor();
    encoderPos = SystemLimens.VentTime;  
  }
  else if (Mode == 7 && buttonPressed && modeVal2) {
    buttonPressed = 0;
    modeVal2 = 0;
    SystemLimens.VentTime = encoderPos;
    EEPROM.update(11,SystemLimens.VentTime);
    SetValueCursor(); 
    Mode = 0;
    encoderPos = 7;
  }
} 

//Rotary encoder interrupt service routine for one encoder pin
void PinA(){
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; // read all eight pin values then strip away all but pinA and pinB's values
  if(reading == B00001100 && aFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos --; //decrement the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00000100) bFlag = 1; //signal that we're expecting pinB to signal the transition to detent from free rotation
  sei(); //restart interrupts
}

//Rotary encoder interrupt service routine for the other encoder pin
void PinB(){
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; //read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && bFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos ++; //increment the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00001000) aFlag = 1; //signal that we're expecting pinA to signal the transition to detent from free rotation
  sei(); //restart interrupts
}
// end of sketch!

void DisplayModeLCD(char v1[],char v2[],int val1,int val2) 
{
  lcd.clear();
  char val1s[4];
  char val2s[4];
  sprintf(val1s,"%d",val1);
  sprintf(val2s,"%d",val2);
  lcd.home();
  lcd.print(v1);
  if (val1 != -27) {
    lcd.setCursor(13,0);
    lcd.print(val1s);
  }
  lcd.setCursor(0,1);
  lcd.print(v2);
  if (val2 != -27) {
    lcd.setCursor(13,1);
    lcd.print(val2s);
  }
}

void ChangeValue(int val,byte r) //ChangeValue
{
  char str[4];
  lcd.setCursor(13,r);
  lcd.print("   ");
  sprintf(str,"%d",val);
  lcd.setCursor(13,r);
  lcd.print(str);
}

void SetValueCursor() // the ">" sign when changing values 
{
  if (modeVal2 == 0) {
    lcd.setCursor(12,0);
    lcd.print(">");
  }
  else {
    lcd.setCursor(12,0);
    lcd.print(" ");
    lcd.setCursor(12,1);
    lcd.print(">");
  }
}

void CheckChangeLights()
{
  if (_leftTillLight > 0) {
    if (millis() >= _leftTillLight + lastTimeOfUpdate) {
      _leftTillLight = 0;
      _lightRise = millis();
    }
    digitalWrite(LightRelayPin,HIGH);
    _lightOn=(_leftTillLight+lastTimeOfUpdate-millis())/(float)OneHour;
    lightOn = (int) _lightOn;
    if ((_lightOn - lightOn) >= 0.5) {
      lightOn++; 
    }
    lightOn = -lightOn;
  }
  else {
    if (millis() >= _lightDaily + _lightRise) {
      if (millis() - _lightRise >= 24 * OneHour) {
        _lightRise = millis();
      }
      digitalWrite(LightRelayPin,HIGH);
      _lightOn=-(millis()-_lightRise-(24*OneHour))/(float)OneHour;
      lightOn = (int) _lightOn;
      if ((_lightOn - lightOn) >= 0.5) {
        lightOn++;
      }
      lightOn = -lightOn;
    }
    else {
      digitalWrite(LightRelayPin,LOW); 
      _lightOn=(millis()-_lightRise)/(float)OneHour;
      lightOn = (int) _lightOn;
      if ((_lightOn - lightOn) >= 0.5) {
        lightOn++; 
      }  
    }
  }
}

void CheckChangeVents()
{   
    _ventOnTime = SystemLimens.VentTime * 1000;
    _ventOffTime = OneHour*24/SystemLimens.VentTimesDaily - _ventOnTime;
    if (!ventPowerFlag) {
      if (millis() > _ventTimer + _ventOffTime) {
        ventPowerFlag = 1;
        _ventTimer = millis();
        analogWrite(VentTransistorPin, 255);
      }
      else if ((DHTTemperature_ > SystemLimens.DHTTemperature_Hi) || (DHTHumidity_ > SystemLimens.DHTHumidity_Hi)) {
        analogWrite(VentTransistorPin, 255);
      }
      else {
        analogWrite(VentTransistorPin, 0);
      }
    }
    else {
      if(millis() > _ventTimer + _ventOnTime) {
        ventPowerFlag = 0;
        _ventTimer = millis();
        analogWrite(VentTransistorPin, 0);
      }
    }

/*  _fanPower= constrain(DHTTemperature_, SystemLimens.DHTTemperature_Low, SystemLimens.DHTTemperature_Hi);
    fanPower = map(_fanPower, SystemLimens.DHTTemperature_Low, SystemLimens.DHTTemperature_Hi, 25, 255);    
    if (DHTHumidity_ < SystemLimens.DHTHumidity_Low + 3) {
      fanPower = 25;
    }
    else if (DHTHumidity_ > SystemLimens.DHTHumidity_Hi) {
      fanPower = 255;
    }
    analogWrite(VentTransistorPin,fanPower);
*/
}

void CheckChangeAirHumidifier()
{
  if (DHTHumidity_ < SystemLimens.DHTHumidity_Low) {
    digitalWrite(HumidifierRelayPin, LOW);
  }
  else {
    digitalWrite(HumidifierRelayPin, HIGH);
  }
/*if ((DHTHumidity_ < SystemLimens.DHTHumidity_Low) && !airHumidify) {
    airHumidify = 1;
    airHumidifyTimer = millis();
    digitalWrite(HumidifierRelayPin, LOW);
  }
  else if (airHumidify && ((millis()- airHumidifyTimer) > 150000)) {
    airHumidify = 0;
    digitalWrite(HumidifierRelayPin,HIGH);
  }*/
}

void CheckChangeWaterPump() 
{ 
  waterTime = SystemLimens.WaterVolume * msPERdL;
  if (watering) {
    digitalWrite(IrrigationRelayPin, LOW);
    if (startYN) {
      startWatering = millis();
      startYN = 0;
    }
    else if (millis() > startWatering + waterTime){ 
      watering = 0;
    }
  }
  else if (startYN && (soilHum <= SystemLimens.SoilHum) && (soilHum > 0)) {
    watering = 1;
  }  
  else if (millis() > startWatering + waterTimeOut) {
    startYN = 1;
  }
  else {
    digitalWrite(IrrigationRelayPin, HIGH);
  }
}
