/*temp controller
 inputs: 
 - Thermistor 10K (low temp, liquid environment) - sous vide?
 - (add later) K-type thermocouple with glass braiding (up to 900F) and  MAX31855 breakout board) http://www.adafruit.com/products/269
 - Rotary encoder for user input.
 
 outputs:
 - 20x4 LCD display http://www.adafruit.com/product/198
 - Solid State Relay (240V, 10A) to control 120V outlet http://www.zoro.com/i/G1739211/
 
 Dan Pannell, 2014
 */

#include <LiquidCrystal.h> //LCD library
#include <Encoder.h> //encoder library


// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

byte wave[8] = {//custom heat wave character
  0b10010,
  0b01001,
  0b01001,
  0b10010,
  0b10010,
  0b01001,
  0b01001,
  0b10010,
};
byte smiley[8] = {//smiley face character
  0b00000,
  0b00000,
  0b01010,
  0b00000,
  0b00000,
  0b10001,
  0b01110,
  0b00000
};


//pins
const int buttonPin = 4; //button on rotary encoder
const int encoder1Pin = 2; //interrupt pins for best performance
const int encoder2Pin = 3; //interrupt pins for best performance
const int thermistorPin = A0; //connected to thermistor
const int relayPin = 5; //connected to relay input +
const int relayGroundPin = 6; //connected to relay input - (will be set to LOW)

//initialize encoder object
Encoder myEnc(encoder1Pin, encoder2Pin);

//variables

//encoder tracking
long oldPosition;
long newPosition;

int programPage = 0; //keeps track of program pages (0 = user input, 1 = ramp up, 2 = stabilize, 3 = maintain
boolean tempMode = 0; //keeps track of thermistor mode (0) and thermocouple mode (1) (for now only thermistor mode)
int currentRow = 1; //keeps track of current row for user input (bypasses thermistor/thermocouple option for now)
boolean buttonState; //checks for button press
int thermistorMax = 221; //max allowable cook temperature (F);
int cookTemp = 134;//cook temp in F
int cookTime = 480;// cook time in minutes
int cookHr = cookTime / 60; //hours for display
int cookMin = cookTime % 60; //minutes for display
int offset = 3; //offset temp for ramp up. after initial heat up, temp will turn off once within offset of cookTemp.

float currentTemp; //current temperature measured/calculated by the thermistor
float lastTemp; //used on programPage 2 to find the temperature peak
float thermistorVal; //analog reading on the thermistor pin

//for timekeeping
unsigned long time;
unsigned long startTime;
unsigned long elapsedTime;

//variables for calculating thermistor temperature
const int SERIESRESISTOR = 9930; // the value of the reference resisto
const int THERMISTORNOMINAL = 10000; // resistance at 25 degrees C
const int TEMPERATURENOMINAL = 25; // temp. for nominal resistance (almost always 25 C)
const int NUMSAMPLES = 5; // how many samples to take and average, more takes longer but is more smooth
const int BCOEFFICIENT = 3950; // The beta coefficient of the thermistor (usually 3000-4000)
int samples[NUMSAMPLES];


void setup() {
  pinMode(thermistorPin, INPUT);
  pinMode(buttonPin, INPUT_PULLUP); //use arduino internal pullup resistors
  pinMode(encoder1Pin, INPUT_PULLUP);
  pinMode(encoder2Pin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);
  pinMode(relayGroundPin, OUTPUT);
  digitalWrite(relayGroundPin, LOW);

  // set up the LCD's number of columns and rows: 
  lcd.begin(20, 4);
  lcd.createChar(0, wave);//creates custom character
  lcd.createChar(1, smiley);//creates custom character
  lcd.home();
  lcd.print("Temp Controller");

  Serial.begin(9600);

  analogReference(EXTERNAL);//uses analog ref for better reference 3.3 voltage

  delay(2000);
  page0select();//select user input page
}


//
void loop() {

  switch (programPage) {
  case 0: //user input page
    buttonState = digitalRead(buttonPin);


    switch (currentRow) {
    case 0: //thermistor vs thermocouple (for use if using both)
      lcd.home();
      lcd.blink();

      newPosition = myEnc.read();
      if (newPosition != oldPosition) {
        lcd.setCursor(8, 0);
        if (tempMode == 1) {
          tempMode = 0;
          lcd.print("  Thermistor");
        }
        else {
          tempMode = 1;
          lcd.print("Thermocouple");
        }
        lcd.home(); 
        delay(250);
        oldPosition = myEnc.read();
      }

      if (buttonState == 0) {
        delay(250);
        currentRow = 1; 
      }

      break;

    case 1: //temperature
      lcd.setCursor(0,1);
      lcd.blink();

      newPosition = myEnc.read();
      if (newPosition > oldPosition) {
        if (tempMode == 0) {//thermistor mode
          if (cookTemp >= thermistorMax) {
            lcd.setCursor(17,1);
            lcd.print("MAX");
            delay(1000);
            cookTemp = 221;
          }
          else {
            cookTemp += 1; //one degree increment
          }
        }
        else {//thermocouple mode
          if (cookTemp < 1000) {
            cookTemp += 5; //five degree increment
          }
        }
        delay(100);
        oldPosition = myEnc.read();
        lcd.setCursor(17,1);
        if (cookTemp < 100) {
          lcd.print(" ");
        }
        lcd.print(cookTemp);
      }
      else if (newPosition < oldPosition) {
        if (tempMode == 0) {//thermistor mode
          if (cookTemp <= 60) {
            cookTemp = 60;
          }
          else {
            cookTemp -= 1; //one degree increment
          }
        }
        else {//thermocouple mode
          if (cookTemp <= 60) {
            cookTemp = 60;
          }
          else {
            cookTemp -= 5; //five degree increment
          }
        }
        delay(100);
        oldPosition = myEnc.read(); 
        lcd.setCursor(17,1);
        if (cookTemp < 100) {
          lcd.print(" ");
        }
        lcd.print(cookTemp);
      }

      if (buttonState == 0) {
        delay(250);
        currentRow = 2; 
      }

      break;
    case 2: //cook time
      lcd.setCursor(0,2);
      lcd.blink();

      newPosition = myEnc.read();
      if (newPosition > oldPosition) {
        delay(150);
        oldPosition = myEnc.read(); 
        cookTime += 10;
        cookHr = cookTime / 60;
        cookMin = cookTime % 60;
        lcd.setCursor(15,2);
        if (cookHr < 10){
          lcd.print(" ");
        }
        lcd.print(cookHr);
        lcd.print("h");
        if (cookMin < 10){
          lcd.print("0");
        }
        lcd.print(cookMin);
      }
      else if (newPosition < oldPosition) {
        delay(150);
        oldPosition = myEnc.read(); 
        cookTime -= 10;
        cookHr = cookTime / 60;
        cookMin = cookTime % 60;
        lcd.setCursor(15,2);
        if (cookHr < 10){
          lcd.print(" ");
        }
        lcd.print(cookHr);
        lcd.print("h");
        if (cookMin < 10){
          lcd.print("0");
        }
        lcd.print(cookMin);
      }

      if (buttonState == 0) {
        delay(250);
        digitalWrite(relayPin, HIGH); //turn heating element on
        Serial.println("Pre-Heat Mode");
        Serial.print("Cook Temp = ");
        Serial.print(cookTemp);
        Serial.println(" F");
        currentTemp = getThermistor();
        Serial.print("Current Temp = ");
        Serial.print(currentTemp);
        Serial.println(" F");
        programPage = 1;
        page1select();
        startTime = millis();
      }
      break;
    }

    break;

  case 1: //pre-heat ramp up
    currentTemp = getThermistor();
    lcd.setCursor(13,2);
    lcd.print(currentTemp);
    lcd.setCursor(18,2);
    lcd.write(byte(0));//write double wave symbol to indicate pre-heating
    lcd.write(byte(0));

    if (currentTemp > cookTemp - offset) {
      programPage = 2;
      Serial.print("Stabilize mode activated at ");
      Serial.print(currentTemp);
      Serial.println(" F");
      Serial.print("Pre-heat time elapsed = ");
      time = millis();
      Serial.print((time-startTime)/60000);
      Serial.println(" minutes");
      lastTemp = currentTemp;
      digitalWrite(relayPin, LOW); //turn heating element off
      lcd.setCursor(18,2);
      lcd.write("  ");//clear heat symbol
      startTime = millis();
      elapsedTime = startTime;
    }
    delay(1000);
    break;

  case 2: //turn off and look for peak temp
    currentTemp = getThermistor();
    lcd.setCursor(13,2);
    lcd.print(currentTemp);

    //countdown
    time = millis();
    if ((time - startTime) > 60000) { //every minute
      cookTime -= 1;
      cookHr = cookTime / 60;
      cookMin = cookTime % 60;
      lcd.setCursor(0,3);
      lcd.print("Time Left:");
      lcd.setCursor(15,3);
      if (cookHr < 10){
        lcd.print(" ");
      }
      lcd.print(cookHr);
      lcd.print("h");
      if (cookMin < 10){
        lcd.print("0");
      }
      lcd.print(cookMin);
      startTime = millis();

      if (currentTemp < lastTemp) { //move to next mode once temperature starts to decrease
        Serial.print("Normal mode active. Peak temp = ");
        Serial.print(currentTemp);
        Serial.println(" F");
        programPage = 3;
        startTime = millis();
        Serial.print("Time to peak temp = ");
        Serial.print((startTime - elapsedTime)/60000);
        Serial.println(" minutes");
      }
      lastTemp = currentTemp;

    }

    delay(1000);
    break;

  case 3: //maintain temp, simple (on if below set point)
    currentTemp = getThermistor();
    lcd.setCursor(13,2);
    lcd.print(currentTemp);
    if (currentTemp < cookTemp) {
      digitalWrite(relayPin, HIGH);//relay on
      lcd.setCursor(19,2);
      lcd.write(byte(0));//write "wave symbol" to indicate heating
    }
    else {
      digitalWrite(relayPin,LOW);//relay off
      lcd.setCursor(11,2);
      lcd.print(" ");
      lcd.setCursor(19,2);
      lcd.print(" ");
    }



    //countdown
    time = millis();
    if ((time - startTime) > 60000) { //every minute
      cookTime -= 1;
      cookHr = cookTime / 60;
      cookMin = cookTime % 60;
      lcd.setCursor(0,3);
      lcd.print("Time Left:");
      lcd.setCursor(15,3);
      if (cookHr < 10){
        lcd.print(" ");
      }
      lcd.print(cookHr);
      lcd.print("h");
      if (cookMin < 10){
        lcd.print("0");
      }
      lcd.print(cookMin);
      startTime = millis();
    }

    //turn off when cowndown is done
    if (cookTime == 0) {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(" Bon Appetit ");
      lcd.write(1);//smiley
      programPage = 4;
    }
    delay(1000);
    break;
  case 4: //done
    //empty loop, nothing else to do!
    break;
  }

}





//turns thermistor reading into temperature in F
float getThermistor() {
  uint8_t i;
  float average;
  for (i=0; i<NUMSAMPLES; i++) {
    samples[i] = analogRead(thermistorPin);
    delay(10);
  }
  average = 0;
  for (i=0; i<NUMSAMPLES; i++) {
    average += samples[i];
  }
  average /= NUMSAMPLES;

  average = (1023/average) - 1;
  average = 10000/average;

  float steinhart; //Celsius calculation
  float f;
  steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
  steinhart = log(steinhart);                  // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                 // Invert
  steinhart -= 273.15;                         // convert to C

  f = steinhart * 1.800 + 32.00; //convert to F
  return f;

}



void page0select() {//page 0 selected (input page)
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(" Type:  ");
  if (tempMode == 0) {
    lcd.print("  Thermistor");
  }
  else {
    lcd.print("Thermocouple");
  }
  lcd.setCursor(0,1);
  lcd.print(" Temp (F):");
  lcd.setCursor(17,1);
  if (cookTemp < 100) {
    lcd.print(" ");
  }
  lcd.print(cookTemp);
  lcd.setCursor(0,2);
  lcd.print(" Cook Time:");
  lcd.setCursor(15,2);
  if (cookHr < 10){
    lcd.print(" ");
  }
  lcd.print(cookHr);
  lcd.print("h");
  if (cookMin < 10){
    lcd.print("0");
  }
  lcd.print(cookMin);
  lcd.setCursor(0,0);
  lcd.blink();
  digitalWrite(relayPin, LOW);//turn off relay output
}

void page1select() {//page 1 selected (temp control mode)
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Type:  ");
  if (tempMode == 0) {
    lcd.print("  Thermistor");
  }
  else {
    lcd.print("Thermocouple");
  }
  lcd.setCursor(0,1);
  lcd.print("Set Temp (F):    ");
  lcd.print(cookTemp);
  lcd.setCursor(0,2);
  lcd.print("Actual (F):   ");
  lcd.print(getThermistor());
  lcd.setCursor(0,3);
  lcd.print("Time Left:  ");
  lcd.setCursor(15,3);
  cookHr = cookTime / 60;
  cookMin = cookTime % 60;
  if (cookHr < 10){
    lcd.print(" ");
  }
  lcd.print(cookHr);
  lcd.print("h");
  if (cookMin < 10){
    lcd.print("0");
  }
  lcd.print(cookMin);
  lcd.setCursor(0,0);
  lcd.noBlink();
}
